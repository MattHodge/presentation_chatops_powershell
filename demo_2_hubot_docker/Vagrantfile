# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.define "sshd" do |sshd|
    sshd.vm.box = "jptoto/Windows2012R2"
    sshd.vm.hostname = "win2012ssh"
    sshd.vm.network "private_network", ip: "172.28.128.200"
    sshd.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus = 2
    end
    sshd.vm.communicator = :winrm
    sshd.winrm.username = "vagrant"
    sshd.winrm.password = "vagrant"
    sshd.vm.provision "shell", path: "install_ssh.ps1"
    sshd.vm.provision :shell, inline: "
      $WUSettings = (New-Object -com 'Microsoft.Update.AutoUpdate').Settings
      $WUSettings.NotificationLevel = 1
      $WUSettings.save()
    "
    sshd.vm.provision "file", source: "./ssh_config/ssh_config", destination: "C:\\Program Files\\OpenSSH-Win64\\sshd_config"
    sshd.vm.provision "file", source: "./authorized_keys/authorized_keys", destination: "C:\\Users\\vagrant\\.ssh\\authorized_keys"
  end

  # config.vm.define "testdc" do |testdc|
  #   # web01.vm.box = "mwrock/Windows2016"
  #   testdc.vm.box = "jptoto/Windows2012R2"
  #   testdc.vm.hostname = "HDGDC"
  #   testdc.vm.communicator = :winrm
  #   testdc.winrm.username = "HDGFS\\vagrant"
  #   testdc.winrm.password = "vagrant"
  #   testdc.vm.network "private_network", ip: "172.28.128.201"
  #   testdc.vm.provider "virtualbox" do |vb|
  #     vb.memory = 2048
  #     vb.cpus = 2
  #   end
  #   testdc.vm.provision :shell, inline: "
  #     $WUSettings = (New-Object -com 'Microsoft.Update.AutoUpdate').Settings
  #     $WUSettings.NotificationLevel = 1
  #     $WUSettings.save()
  #
  #     if ($PSVersionTable.PSVersion.Major -eq 4)
  #     {
  #       choco install powershell 5 -y
  #     }
  #   "
  #   testdc.vm.provision :reload
  #   testdc.vm.provision :shell, inline: "
  #     Write-Output 'Installing Nuget'
  #     Install-PackageProvider NuGet -MinimumVersion '2.8.5.201' -Force
  #
  #     $modules = @('xActiveDirectory', 'xNetworking', 'xComputerManagement', 'xDNSServer')
  #
  #     $installedModules = (Get-Module -ListAvailable).Name
  #     ForEach ($m in $modules)
  #     {
  #         if (!($installedModules -contains $m))
  #         {
  #             Install-Module -Name $m -force
  #         }
  #         else {
  #             Write-Output ""$($m) is already installed.""
  #         }
  #     }
  #   "
  #   testdc.vm.provision :reload
  #   testdc.vm.provision "shell", path: "domaincontroler_dsc.ps1"
  #   testdc.vm.provision :reload
  #   testdc.vm.provision :shell, inline: "Start-DscConfiguration -UseExisting -Wait -Verbose"
  #   testdc.vm.provision :reload
  #   testdc.vm.provision :shell, inline: "Start-DscConfiguration -UseExisting -Wait -Verbose"
  #   testdc.vm.provision :reload
  # end
end
